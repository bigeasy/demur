describe('demur', () => {
    const assert = require('assert')
    const Demur = require('..')
    it('can continue immediately at first', async () => {
        const when = Date.now()
        const demur = new Demur({ immediate: true, attempts: 2 })
        assert(await demur.demur(), 'continue')
        assert(Date.now() - when < 25, 'immediate')
        demur.cancel()
        assert(!await demur.demur(), 'stop')
    })
    it('can demur', async () => {
        const when = Date.now()
        const demur = new Demur({ immediate: true, attempts: 2, minimum: 25 })
        assert(await demur.demur(), 'continue')
        assert(Date.now() - when < 24, 'immediate')
        assert(await demur.demur(), 'continue')
        assert(Date.now() - when > 24, 'demurred')
    })
    it('can give up', async () => {
        const when = Date.now()
        const demur = new Demur({ immediate: true, attempts: 1, minimum: 25 })
        assert(await demur.demur(), 'continue')
        assert(Date.now() - when < 25, 'immediate')
        assert(!await demur.demur(), 'stop')
        assert(demur.canceled, 'canceled')
    })
    it('can reset', async () => {
        const when = Date.now()
        const demur = new Demur({ immediate: true, attempts: 1, minimum: 25 })
        assert(await demur.demur(), 'continue')
        demur.reset()
        assert(Date.now() - when < 25, 'immediate')
        assert(await demur.demur(), 'continue')
        demur.cancel()
        assert(demur.canceled, 'canceled')
    })
    it('can cancel', async () => {
        const when = Date.now()
        const demur = new Demur({ immediate: false, attempts: 1, minimum: 30000 })
        const promise = demur.demur()
        demur.cancel()
        assert(!await promise, 'stop')
        assert(Date.now() - when < 25, 'timer stopped')
        assert(demur.canceled, 'canceled')
    })
})
